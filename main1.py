import re
import logging
from aiogram import Bot, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher
from aiogram.filters import Command
import asyncio


from config import API_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
VALID_NAME_REGEX = r'^[a-zA-Z_][a-zA-Z0-9_]*$'
SQL_RESERVED_KEYWORDS = {
    "SELECT", "FROM", "WHERE", "INSERT", "UPDATE", "DELETE", "JOIN", "GROUP", "ORDER", "BY",
    "HAVING", "IN", "IS", "NULL", "AND", "OR", "NOT", "LIKE", "BETWEEN", "EXISTS", "DISTINCT",
    "CASE", "WHEN", "THEN", "ELSE", "END"
}


def is_valid_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å—Ç–æ–ª–±—Ü–∞."""
    return bool(re.match(VALID_NAME_REGEX, name)) and name.upper() not in SQL_RESERVED_KEYWORDS


def parse_table_line(line: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã."""
    table_info = line.strip().split(" : ")
    table_name_parts = table_info[0].split(" ")

    table_name = table_name_parts[0]
    alias = None
    if "-" in table_name_parts:
        alias_index = table_name_parts.index("-")
        alias = table_name_parts[alias_index + 1] if len(table_name_parts) > alias_index + 1 else None

    columns = table_info[1].split() if len(table_info) > 1 and table_info[1] else ["*"]
    join_condition = table_info[2].strip() if len(table_info) > 2 else None

    return {
        "name": table_name,
        "alias": alias,
        "columns": columns,
        "join_condition": join_condition
    }


def generate_sql(query: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""
    lines = query.strip().split("\n")
    if not lines:
        return "–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    tables = []
    for line in lines:
        table = parse_table_line(line)

        if not is_valid_name(table["name"]):
            return f"–û—à–∏–±–∫–∞: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã '{table['name']}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ."

        if table["alias"] and not is_valid_name(table["alias"]):
            return f"–û—à–∏–±–∫–∞: –ü—Å–µ–≤–¥–æ–Ω–∏–º '{table['alias']}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω."

        if not all(is_valid_name(col) for col in table["columns"] if col != "*"):
            return "–û—à–∏–±–∫–∞: –û–¥–Ω–æ –∏–∑ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ."

        tables.append(table)

    if any(i > 0 and not t["join_condition"] for i, t in enumerate(tables)):
        return "–û—à–∏–±–∫–∞: –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π, –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —É—Å–ª–æ–≤–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."

    select_clause = "SELECT"
    select_columns = []
    from_clause = ""
    join_clauses = []

    for i, table in enumerate(tables):
        if i == 0:
            from_clause = (
                f"FROM {table['name']} AS {table['alias']}" if table["alias"] else f"FROM {table['name']}"
            )
        else:
            join_clauses.append(
                f"\nJOIN {table['name']} AS {table['alias']} ON {table['join_condition']}" if table["alias"] else
                f"\nJOIN {table['name']} ON {table['join_condition']}"
            )

        formatted_columns = [
            f"{table['alias'] or table['name']}.{col}" for col in table["columns"]
        ]
        select_columns.extend(formatted_columns)

    sql_query = f"{select_clause} {', '.join(select_columns)} {from_clause}{''.join(join_clauses)};"
    return sql_query


# –•—ç–Ω–¥–ª–µ—Ä—ã
async def send_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:\n\n"
        "—Ç–∞–±–ª–∏—Ü–∞ \\[ - –ø—Å–µ–≤–¥–æ–Ω–∏–º ] : \\[ —Å—Ç–æ–ª–±—Ü—ã ] : \\[ —É—Å–ª–æ–≤–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è JOIN]\n\n"
        "üîπ *–í–∞–∂–Ω–æ:*\n"
        "- –£ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã *–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è*.\n"
        "- –£—Å–ª–æ–≤–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–¥–∞—é—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`customers - c : name age : c.id = orders.customer_id`\n\n"
        "üìù *–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –≤–≤–æ–¥–∞:*\n"
        "`customers - c : name age\norders - o : order_date : c.id = o.customer_id`",
        parse_mode="Markdown"
    )


async def process_sql_query(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞."""
    query = message.text.strip()
    sql_query = generate_sql(query)
    await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π SQL –∑–∞–ø—Ä–æ—Å:\n```sql\n{sql_query}```", parse_mode="Markdown")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dispatcher.message.register(send_welcome, Command("start"))
    dispatcher.message.register(process_sql_query)
    await dispatcher.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
